// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.14.0
// source: jump/jump.proto

package jump

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JumpServiceClient is the client API for JumpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JumpServiceClient interface {
	Jump(ctx context.Context, in *JumpReq, opts ...grpc.CallOption) (*JumpRes, error)
}

type jumpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJumpServiceClient(cc grpc.ClientConnInterface) JumpServiceClient {
	return &jumpServiceClient{cc}
}

func (c *jumpServiceClient) Jump(ctx context.Context, in *JumpReq, opts ...grpc.CallOption) (*JumpRes, error) {
	out := new(JumpRes)
	err := c.cc.Invoke(ctx, "/jump.JumpService/Jump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JumpServiceServer is the server API for JumpService service.
// All implementations must embed UnimplementedJumpServiceServer
// for forward compatibility
type JumpServiceServer interface {
	Jump(context.Context, *JumpReq) (*JumpRes, error)
	mustEmbedUnimplementedJumpServiceServer()
}

// UnimplementedJumpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJumpServiceServer struct {
}

func (UnimplementedJumpServiceServer) Jump(context.Context, *JumpReq) (*JumpRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jump not implemented")
}
func (UnimplementedJumpServiceServer) mustEmbedUnimplementedJumpServiceServer() {}

// UnsafeJumpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JumpServiceServer will
// result in compilation errors.
type UnsafeJumpServiceServer interface {
	mustEmbedUnimplementedJumpServiceServer()
}

func RegisterJumpServiceServer(s grpc.ServiceRegistrar, srv JumpServiceServer) {
	s.RegisterService(&JumpService_ServiceDesc, srv)
}

func _JumpService_Jump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumpServiceServer).Jump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jump.JumpService/Jump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumpServiceServer).Jump(ctx, req.(*JumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

// JumpService_ServiceDesc is the grpc.ServiceDesc for JumpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JumpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jump.JumpService",
	HandlerType: (*JumpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Jump",
			Handler:    _JumpService_Jump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jump/jump.proto",
}
